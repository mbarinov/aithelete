datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  trainingProgram TrainingProgram?
  profile         UserProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model UserProfile {
  id           String       @id @default(cuid())
  age          Int
  weight       Float
  height       Float
  fitnessLevel FitnessLevel
  gender       Gender
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String       @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model TrainingProgram {
  id                 String    @id @default(cuid())
  programName        String
  programDescription String
  exercises          Workout[]
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Workout {
  id                 String          @id @default(cuid())
  day                Int
  workoutName        String
  workoutDescription String
  duration           Int
  caloriesBurned     Int
  trainingProgram    TrainingProgram @relation(fields: [trainingProgramId], references: [id], onDelete: Cascade)
  trainingProgramId  String
  exercises          Exercise[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([trainingProgramId])
}

model Exercise {
  id                 String         @id @default(cuid())
  name               String
  description        String
  category           String
  muscleGroupCount   Int
  sets               Int            @default(3)
  reps               Int?           @default(12)
  weightAmount       Float?
  weightUnit         String?
  assistWeightAmount Float?
  assistWeightUnit   String?
  duration           Int?
  workout            Workout        @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId          String
  illustrations      Illustration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workoutId])
}

model Illustration {
  id         String   @id @default(cuid())
  url        String // URL to the image
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([exerciseId])
}

enum FitnessLevel {
  beginner
  intermediate
  advanced
}

enum Gender {
  male
  female
  other
}
